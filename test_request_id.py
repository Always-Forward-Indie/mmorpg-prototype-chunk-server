#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã lag compensation —Å requestId
"""

import socket
import json
import time
import uuid
import hashlib

def generate_request_id(session_id=123):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç requestId –≤ —Ñ–æ—Ä–º–∞—Ç–µ sync_timestamp_session_sequence_hash"""
    timestamp = int(time.time() * 1000)  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    sequence = int(time.time() % 10000)  # –ø—Ä–æ—Å—Ç–æ–π sequence
    hash_part = hashlib.md5(f"{timestamp}_{session_id}_{sequence}".encode()).hexdigest()[:8].upper()
    return f"sync_{timestamp}_{session_id}_{sequence}_{hash_part}"

def test_move_character():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∞–∫–µ—Ç–∞ moveCharacter —Å requestId"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect(('localhost', 27017))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ chunk server —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Å requestId
        request_id = generate_request_id()
        client_send_ms = int(time.time() * 1000)
        
        packet = {
            "header": {
                "requestId": request_id,
                "clientSendMs": client_send_ms,
                "eventType": "moveCharacter"
            },
            "body": {
                "clientId": 1,
                "characterId": 1,
                "position": {
                    "positionX": 100.5,
                    "positionY": 200.3,
                    "positionZ": 0.0,
                    "rotationZ": 45.0
                }
            }
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞
        message = json.dumps(packet) + "\n"
        sock.send(message.encode())
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞–∫–µ—Ç —Å requestId: {request_id}")
        print(f"üïê Client send time: {client_send_ms}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = sock.recv(4096).decode().strip()
        response_data = json.loads(response)
        
        # –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        client_recv_ms = int(time.time() * 1000)
        
        print("\nüì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
        print(json.dumps(response_data, indent=2, ensure_ascii=False))
        
        # –ê–Ω–∞–ª–∏–∑ lag compensation
        header = response_data.get("header", {})
        body = response_data.get("body", {})
        
        request_id_echo = header.get("requestIdEcho") or body.get("requestIdEcho")
        server_recv_ms = header.get("serverRecvMs") or body.get("serverRecvMs")
        server_send_ms = header.get("serverSendMs") or body.get("serverSendMs")
        client_send_ms_echo = header.get("clientSendMsEcho") or body.get("clientSendMsEcho")
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑ lag compensation:")
        print(f"Original requestId:     {request_id}")
        print(f"Echoed requestId:       {request_id_echo}")
        print(f"RequestId match:        {request_id == request_id_echo}")
        print(f"Client send time:       {client_send_ms}")
        print(f"Server recv time:       {server_recv_ms}")
        print(f"Server send time:       {server_send_ms}")
        print(f"Client recv time:       {client_recv_ms}")
        print(f"Client send echo:       {client_send_ms_echo}")
        
        if all([server_recv_ms, server_send_ms, client_send_ms_echo]):
            # –†–∞—Å—á–µ—Ç latency
            client_to_server_latency = server_recv_ms - client_send_ms
            server_processing_time = server_send_ms - server_recv_ms
            server_to_client_latency = client_recv_ms - server_send_ms
            total_round_trip = client_recv_ms - client_send_ms
            
            print(f"\n‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
            print(f"Client ‚Üí Server latency: {client_to_server_latency} ms")
            print(f"Server processing time:  {server_processing_time} ms")
            print(f"Server ‚Üí Client latency: {server_to_client_latency} ms")
            print(f"Total round trip time:   {total_round_trip} ms")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if request_id == request_id_echo:
                print("‚úÖ RequestId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –£–°–ü–ï–®–ù–û")
            else:
                print("‚ùå RequestId —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –û–®–ò–ë–ö–ê")
                
            if client_send_ms == client_send_ms_echo:
                print("‚úÖ Timestamp —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –£–°–ü–ï–®–ù–û")
            else:
                print("‚ùå Timestamp —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –û–®–ò–ë–ö–ê")
        else:
            print("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ lag compensation")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        sock.close()

def test_join_character():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∞–∫–µ—Ç–∞ joinCharacter —Å requestId"""
    
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect(('localhost', 27017))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ chunk server —É—Å–ø–µ—à–Ω–æ")
        
        request_id = generate_request_id()
        client_send_ms = int(time.time() * 1000)
        
        packet = {
            "header": {
                "requestId": request_id,
                "clientSendMs": client_send_ms,
                "eventType": "joinCharacter"
            },
            "body": {
                "clientId": 1,
                "characterId": 1,
                "character": {
                    "characterId": 1,
                    "characterName": "TestPlayer",
                    "characterClass": "Warrior",
                    "characterLevel": 5,
                    "currentHealth": 100,
                    "maxHealth": 100
                },
                "position": {
                    "positionX": 0.0,
                    "positionY": 0.0,
                    "positionZ": 0.0,
                    "rotationZ": 0.0
                }
            }
        }
        
        message = json.dumps(packet) + "\n"
        sock.send(message.encode())
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω joinCharacter —Å requestId: {request_id}")
        
        response = sock.recv(4096).decode().strip()
        response_data = json.loads(response)
        
        print("\nüì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
        print(json.dumps(response_data, indent=2, ensure_ascii=False))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requestId –≤ –æ—Ç–≤–µ—Ç–µ
        header = response_data.get("header", {})
        body = response_data.get("body", {})
        request_id_echo = header.get("requestIdEcho") or body.get("requestIdEcho")
        
        if request_id == request_id_echo:
            print("‚úÖ RequestId —ç—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è joinCharacter")
        else:
            print(f"‚ùå RequestId —ç—Ö–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {request_id}, –ø–æ–ª—É—á–µ–Ω {request_id_echo}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã lag compensation —Å requestId")
    print("=" * 60)
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ moveCharacter...")
    test_move_character()
    
    print("\n" + "=" * 60)
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ joinCharacter...")
    test_join_character()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
